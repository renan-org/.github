name: Migrate Repo Workflow
on:
  issues:
    types: [opened, reopened]
  issue_comment:
    types: [created]

jobs:
  init-migration:
    if: |
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'migrate-repo')) ||
      (github.event_name == 'issue_comment' && 
       contains(github.event.issue.labels.*.name, 'migrate-repo') && 
       contains(github.event.comment.body, 'rerun migration') &&
       github.event.comment.user.type != 'Bot')
    ### Make sure to manually create the label "migrate-repo" in the organization
    ### https://github.com/renan-org/.github/issues/labels
    runs-on: ubuntu-latest
    outputs:
      repos_found: ${{ steps.search-repos.outputs.repos_found }}
      matrix: ${{ steps.prepare-matrix.outputs.matrix }}
    permissions:
      issues: write
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout current repository (for Issue template)
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Init gh cli
        ## You may want to use a GH App here instead
        run: gh auth login --with-token <<< ${{ secrets.ISSUE_OPS_TOKEN }}
        
      - name: Comment on Issue regarding workflow processing
        run: |
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            gh issue comment ${{ github.event.issue.number }} --body "‚ôªÔ∏è **Migration Restart Triggered** - This issue migration is being reprocessed due to a restart request. Please wait for the results. <br><br> üîó [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          else
            gh issue comment ${{ github.event.issue.number }} --body "This issue is being processed by the Repository Migration workflow. Please wait for the results. <br><br> üîó [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          fi

      - name: Parse issue body
        id: parse
        uses: stefanbuck/github-issue-parser@v3
        with:
          template-path: .github/ISSUE_TEMPLATE/request-migration.yml
          issue-body: "${{ github.event.issue.body }}"

      - name: Save parsed output to file
        id: gather-issue-inputs
        run: echo '${{ steps.parse.outputs.jsonString }}' > migrate_output.json

      - name: Export parsed values to environment variables
        run: |
          echo "SOURCE_ORG=$(jq -r '.org_name' migrate_output.json | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "TEAM_NAME=$(jq -r '.team_name' migrate_output.json | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "TOPIC_LIST=$(jq -r '.topic_list' migrate_output.json)" >> $GITHUB_ENV
          echo "JUSTIFICATION=$(jq -r '.justification' migrate_output.json)" >> $GITHUB_ENV

      - name: "DEBUG - Show parsed data"
        run: |
          echo "Source organization: ${{ env.SOURCE_ORG }}"
          echo "Team to be assigned: ${{ env.TEAM_NAME }}"
          echo "Topics to search for: ${{ env.TOPIC_LIST }}"
          echo "Justification: ${{ env.JUSTIFICATION }}"

      - name: Validate source organization name conventions
        id: validate-source-org
        run: |
          SOURCE_ORG="${{ env.SOURCE_ORG }}"
          echo "Validating source organization name: $SOURCE_ORG"
          
          # Check if org name is empty
          if [ -z "$SOURCE_ORG" ]; then
            echo "‚ùå Source organization name cannot be empty"
            exit 1
          fi
          
          # Check length (GitHub orgs: 1-39 characters)
          if [ ${#SOURCE_ORG} -gt 39 ]; then
            echo "‚ùå Organization name cannot be longer than 39 characters (current: ${#SOURCE_ORG})"
            exit 1
          fi
          
          # Check for invalid characters (only alphanumeric and hyphens)
          if [[ ! "$SOURCE_ORG" =~ ^[a-z0-9-]+$ ]]; then
            echo "‚ùå Organization name can only contain lowercase letters, numbers, and hyphens (-)"
            exit 1
          fi
          
          # Check if it starts or ends with hyphens
          if [[ "$SOURCE_ORG" =~ ^- ]] || [[ "$SOURCE_ORG" =~ -$ ]]; then
            echo "‚ùå Organization name cannot start or end with hyphens"
            exit 1
          fi
          
          echo "‚úÖ Source organization name validation passed"

      - name: Validate team name conventions
        id: validate-team-name
        run: |
          TEAM_NAME="${{ env.TEAM_NAME }}"
          echo "Validating team name: $TEAM_NAME"
          
          # Check if team name is empty
          if [ -z "$TEAM_NAME" ]; then
            echo "‚ùå Team name cannot be empty"
            exit 1
          fi
          
          # Check length (GitHub teams: 1-100 characters)
          if [ ${#TEAM_NAME} -gt 100 ]; then
            echo "‚ùå Team name cannot be longer than 100 characters (current: ${#TEAM_NAME})"
            exit 1
          fi
          
          # Check for invalid characters (only alphanumeric, hyphens, underscores, periods)
          if [[ ! "$TEAM_NAME" =~ ^[a-z0-9._-]+$ ]]; then
            echo "‚ùå Team name can only contain lowercase letters, numbers, hyphens (-), underscores (_), and periods (.)"
            exit 1
          fi
          
          # Check if it starts or ends with special characters
          if [[ "$TEAM_NAME" =~ ^[._-] ]] || [[ "$TEAM_NAME" =~ [._-]$ ]]; then
            echo "‚ùå Team name cannot start or end with hyphens, underscores, or periods"
            exit 1
          fi
          
          # Check for consecutive special characters
          if [[ "$TEAM_NAME" =~ [._-]{2,} ]]; then
            echo "‚ùå Team name cannot contain consecutive hyphens, underscores, or periods"
            exit 1
          fi
          
          echo "‚úÖ Team name validation passed"

      - name: Validate and process topics
        id: validate-topics
        run: |
          TOPIC_LIST="${{ env.TOPIC_LIST }}"
          echo "Validating topics: $TOPIC_LIST"
          
          # Check if topic list is empty
          if [ -z "$TOPIC_LIST" ]; then
            echo "‚ùå Topic list cannot be empty"
            exit 1
          fi
          
          # Convert comma-separated topics to array and validate each
          IFS=',' read -ra TOPICS <<< "$TOPIC_LIST"
          CLEANED_TOPICS=()
          
          for topic in "${TOPICS[@]}"; do
            # Trim whitespace and convert to lowercase
            topic=$(echo "$topic" | xargs | tr '[:upper:]' '[:lower:]')
            
            # Check topic length (GitHub topics: 1-50 characters)
            if [ ${#topic} -gt 50 ]; then
              echo "‚ùå Topic '$topic' cannot be longer than 50 characters (current: ${#topic})"
              exit 1
            fi
            
            # Check for invalid characters (only alphanumeric and hyphens)
            if [[ ! "$topic" =~ ^[a-z0-9-]+$ ]]; then
              echo "‚ùå Topic '$topic' can only contain lowercase letters, numbers, and hyphens (-)"
              exit 1
            fi
            
            # Check if it starts with a number or hyphen
            if [[ "$topic" =~ ^[0-9-] ]]; then
              echo "‚ùå Topic '$topic' cannot start with a number or hyphen"
              exit 1
            fi
            
            CLEANED_TOPICS+=("$topic")
          done
          
          # Export cleaned topics
          printf -v JOINED '%s,' "${CLEANED_TOPICS[@]}"
          echo "CLEANED_TOPICS=${JOINED%,}" >> $GITHUB_ENV
          
          echo "‚úÖ Topics validation passed: ${CLEANED_TOPICS[*]}"

      - name: Comment on Issue if source organization validation fails
        if: always() && steps.validate-source-org.outcome == 'failure'
        run: |
          gh issue comment ${{ github.event.issue.number }} --body "‚ùå The source organization name '${{ env.SOURCE_ORG }}' does not follow GitHub naming conventions. Organization names must:
          - Be 1-39 characters long
          - Contain only lowercase letters, numbers, and hyphens (-)
          - Not start or end with hyphens"

      - name: Comment on Issue if team name validation fails
        if: always() && steps.validate-team-name.outcome == 'failure'
        run: |
          gh issue comment ${{ github.event.issue.number }} --body "‚ùå The team name '${{ env.TEAM_NAME }}' does not follow GitHub naming conventions. Team names must:
          - Be 1-100 characters long
          - Contain only lowercase letters, numbers, hyphens (-), underscores (_), and periods (.)
          - Not start or end with special characters
          - Not contain consecutive special characters"

      - name: Comment on Issue if topics validation fails
        if: always() && steps.validate-topics.outcome == 'failure'
        run: |
          gh issue comment ${{ github.event.issue.number }} --body "‚ùå One or more topics do not follow GitHub naming conventions. Topics must:
          - Be 1-50 characters long
          - Contain only lowercase letters, numbers, and hyphens (-)
          - Not start with a number or hyphen
          - Be comma-separated if multiple topics are provided"

      - name: Verify source organization is accessible
        id: check-source-org
        run: |
            gh api orgs/${{ env.SOURCE_ORG }} --silent && echo "‚úÖ Source organization is accessible" || (echo "‚ùå Source organization is not accessible!" && exit 1)

      - name: Comment on Issue if source organization is not accessible
        if: always() && steps.check-source-org.outcome == 'failure'
        run: |
          gh issue comment ${{ github.event.issue.number }} --body "‚ùå The source organization '${{ env.SOURCE_ORG }}' is not accessible. Please verify the organization name and ensure you have permissions to access it."

      - name: Ensure team EXISTS in target organization
        id: check-team-existence
        run: |
            gh api orgs/renan-org/teams/${{ env.TEAM_NAME }} --silent && echo "‚úÖ Team exists, proceeding ..." || (echo "‚ùå Team does not exist!" && exit 1)

      - name: Comment on Issue if team does not exist
        if: always() && steps.check-team-existence.outcome == 'failure'
        run: |
          gh issue comment ${{ github.event.issue.number }} --body "‚ùå The team '${{ env.TEAM_NAME }}' does not exist in the target organization. Please create the team first or use an existing team."

      - name: Search for repositories with matching topics
        id: search-repos
        run: |
          # Make the script executable and run it
          chmod +x .github/scripts/search-repositories.js
          node .github/scripts/search-repositories.js

      - name: Comment on Issue if no repositories found
        if: always() && steps.search-repos.outcome == 'failure'
        run: |
          gh issue comment ${{ github.event.issue.number }} --body "‚ùå No repositories were found in organization '${{ env.SOURCE_ORG }}' that contain ALL of the specified topics: ${{ env.CLEANED_TOPICS }}. Please verify:
          - The organization name is correct
          - The topics exist on repositories in that organization
          - All specified topics are present on the same repositories"

      - name: Prepare migration matrix
        if: steps.search-repos.outputs.repos_found == 'true'
        id: prepare-matrix
        run: |
          echo "Preparing migration matrix..."
          # Convert search results to matrix format
          MATRIX=$(cat search_results.json | jq -c '{include: [.[] | {repo_name: .name, full_name: .full_name}]}')
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "Migration matrix prepared with $(cat search_results.json | jq length) repositories"

      - name: Upload search results as artifact
        if: steps.search-repos.outputs.repos_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: migration-data
          path: |
            search_results.json
            migrate_output.json
          retention-days: 1

  migrate-repositories:
    needs: init-migration
    if: needs.init-migration.outputs.repos_found == 'true'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write
      pull-requests: write
    strategy:
      fail-fast: false
      max-parallel: 5  # Adjust based on your needs and rate limits
      matrix: ${{ fromJson(needs.init-migration.outputs.matrix) }}
    
    steps:
      - name: Download migration data
        uses: actions/download-artifact@v4
        with:
          name: migration-data

      - name: Load environment variables
        run: |
          echo "SOURCE_ORG=$(jq -r '.org_name' migrate_output.json | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "TEAM_NAME=$(jq -r '.team_name' migrate_output.json | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Init gh cli
        run: gh auth login --with-token <<< ${{ secrets.ISSUE_OPS_TOKEN }}

      - name: Install gh GEI extension
        run: |
          echo "Installing gh GEI extension..."
          gh extension install github/gh-gei || echo "gh GEI extension already installed"

      - name: Migrate repository
        id: migrate
        run: |
          REPO_NAME="${{ matrix.repo_name }}"
          echo "üîÑ Migrating repository: $REPO_NAME"
          
          # Check if repository already exists in target organization
          if gh api repos/renan-org/$REPO_NAME --silent 2>/dev/null; then
            echo "‚ö†Ô∏è Repository $REPO_NAME already exists in target organization, skipping..."
            echo "status=skipped" >> $GITHUB_OUTPUT
            echo "reason=already exists" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Migrate repository using gh gei
          if gh gei migrate-repo --github-source-org "${{ env.SOURCE_ORG }}" --source-repo "$REPO_NAME" --github-target-org "renan-org" --target-repo "$REPO_NAME" --target-repo-visibility internal; then
            echo "‚úÖ Successfully migrated repository: $REPO_NAME"
            echo "status=success" >> $GITHUB_OUTPUT
            
            # Assign team to repository
            if gh api orgs/renan-org/teams/${{ env.TEAM_NAME }}/repos/renan-org/$REPO_NAME --method PUT --field permission="maintain" --silent; then
              echo "‚úÖ Assigned team to: $REPO_NAME"
              echo "team_assigned=true" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è Failed to assign team to: $REPO_NAME"
              echo "team_assigned=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå Failed to migrate repository: $REPO_NAME"
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "reason=migration failed" >> $GITHUB_OUTPUT
            exit 1
          fi
      - name: Comment on Issue regarding failure
        if: failure()
        run: |
          gh issue comment ${{ github.event.issue.number }} --body "‚ùå The repository migration for \"${{ matrix.repo_name }}\" failed. Check logs in the workflow run linked in the previous job."

  summarize-results:
    needs: [init-migration, migrate-repositories]
    if: always() && needs.init-migration.outputs.repos_found == 'true'
    runs-on: ubuntu-latest
    permissions:
      issues: write
    
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Init gh cli
        run: gh auth login --with-token <<< ${{ secrets.ISSUE_OPS_TOKEN }}

      - name: Download migration data
        uses: actions/download-artifact@v4
        with:
          name: migration-data

      - name: Load environment variables
        run: |
          echo "SOURCE_ORG=$(jq -r '.org_name' migrate_output.json | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "TEAM_NAME=$(jq -r '.team_name' migrate_output.json | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "CLEANED_TOPICS=$(jq -r '.topic_list' migrate_output.json)" >> $GITHUB_ENV

      - name: Analyze migration results
        run: |
          TOTAL_REPOS=$(cat search_results.json | jq length)
          SUCCESS_COUNT=0
          FAILED_COUNT=0
          SKIPPED_COUNT=0
          MIGRATED_REPOS=()
          FAILED_REPOS=()
          SKIPPED_REPOS=()
          
          # Count results from migration jobs
          echo "Analyzing results from $TOTAL_REPOS migration jobs..."
          
          # Note: In a real scenario, you'd need to collect job results
          # For now, we'll provide a summary format
          echo "TOTAL_REPOS=$TOTAL_REPOS" >> $GITHUB_ENV
          echo "‚úÖ Migration analysis completed"

      - name: Comment on Issue with migration results
        run: |
          COMMENT="## üîÑ Repository Migration Results (Parallel Execution)
          
          **Migration Summary:**
          - üì¶ Total repositories found: ${{ env.TOTAL_REPOS }}
          - üîÑ Migrations executed in parallel for faster processing
          - üë• Team to be assigned: ${{ env.TEAM_NAME }}
          
          **Source Organization:** ${{ env.SOURCE_ORG }}
          **Topics Filter:** ${{ env.CLEANED_TOPICS }}
          
          > **Note:** Individual migration results can be found in the workflow run logs for each parallel job.
          > Check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed status of each repository migration."
          
          gh issue comment ${{ github.event.issue.number }} --body "$COMMENT"
